1) hr 사용자(스키마)의 다음 7개의 테이블의 구조를 분석한다.
 - 테이블명, 컬럼명, 자료형, 기본키, 참조키등의 제약조건 등
 - 7개의 테이블
 
--■■■COUNTRIES
SELECT * FROM COUNTRIES;
CREATE TABLE countries(
	country_id CHAR(2),
	country_name VARCHAR2(40),
	region_id NUMBER
);

ALTER TABLE countries ADD CONSTRAINT country_c_id_pk PRIMARY KEY (country_id);
ALTER TABLE countries ADD CONSTRAINT country_id_nn CHECK (country_id IS NOT NULL);
ALTER TABLE countries ADD CONSTRAINT countr_reg_fk FOREIGN KEY (region_id)
           	REFERENCES regions(region_id);
   


INSERT INTO countries(country_id, country_name, region_id) VALUES('AR', 'Argentina', 2);
INSERT INTO countries(country_id, country_name, region_id) VALUES('AU', 'Australia', 3);
INSERT INTO countries(country_id, country_name, region_id) VALUES('BE', 'Belgium', 1);
INSERT INTO countries(country_id, country_name, region_id) VALUES('IT', 'Italy', 1);
COMMIT;

TRUNCATE TABLE COUNTRIES;
    	
DESC countries;
SELECT * FROM countries;


--■■■DEPARTMENTS
CREATE TABLE departments(
	department_id NUMBER(4) ,
	department_name VARCHAR2(30) CONSTRAINT dept_name_nn NOT NULL,
	manager_id NUMBER(6),
	location_id NUMBER(4)
);
            
INSERT INTO departments(department_id, department_name,  manager_id, location_id ) VALUES(90,'Executive',100,1700);
INSERT INTO departments(department_id, department_name,  location_id ) VALUES(240, 'Government Sales', 1700);
INSERT INTO departments(department_id, department_name,  location_id ) VALUES(250, 'Retail Sales', 1700);

SELECT * FROM USER_CONSTRAINTS WHERE 
ALTER TABLE departments ADD CONSTRAINT dept_id_pk PRIMARY KEY (department_id);
ALTER TABLE departments ADD CONSTRAINT dept_loc_fk FOREIGN KEY (location_id)
           	REFERENCES locations(location_id);
ALTER TABLE departments ADD CONSTRAINT dept_mgr_fk FOREIGN KEY (manager_id)
           	REFERENCES employees(employee_id);
           	
DESC departments;
drop table departments purge;
SELECT * FROM departments;

SELECT * FROM user_constraints WHERE table_name = 'DEPARTMENTS';




---■■■EMPLOYEES
CREATE TABLE employees(
    EMPLOYEE_ID NUMBER(6) NOT NULL,
    FIRST_NAME VARCHAR2(20),
    LAST_NAME VARCHAR2(25) NOT NULL,
    EMAIL VARCHAR2(25) NOT NULL,
    PHONE_NUMBER VARCHAR2(20),
    HIRE_DATE DATE NOT NULL,
    JOB_ID VARCHAR2(10) NOT NULL,
    SALARY NUMBER(8,2), 
    COMMISSION_PCT NUMBER(2,2),  
    MANAGER_ID NUMBER(6),    
    DEPARTMENT_ID NUMBER(4) 
);
select * from tab;

INSERT 
    INTO employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,
                      JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
    VALUES(100,'Steven','King','SKING','515.123.4567','87/06/17','AD_PRES',24000,NULL,NULL,90);
INSERT 
    INTO employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,
                      JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
    VALUES(101, 'Neena','Kochhar', 'NKOCHHAR', '515.123.4568', '89/09/21' ,'AD_VP', 17000, NULL, 100,90);
INSERT 
    INTO employees(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,
                      JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID)
    VALUES(102,'Lex','De Haan','LDEHAAN','515.123.4569','93/01/13','AD_VP',17000,NULL,100,90);

COMMIT;   
SELECT * FROM employees;

ALTER TABLE employees ADD CONSTRAINT EMP_EMP_ID_PK PRIMARY KEY(EMPLOYEE_ID);
ALTER TABLE employees ADD CONSTRAINT EMP_EMAIL_UK UNIQUE(EMAIL);
ALTER TABLE employees ADD CONSTRAINT EMP_SALARY_MIN CHECK(salary > 0);

----■■■JOBS 만들기
--이름         널?       유형           
------------ -------- ------------ 
--JOB_ID     NOT NULL VARCHAR2(10) 
--JOB_TITLE  NOT NULL VARCHAR2(35) 
--MIN_SALARY          NUMBER(6)    
--MAX_SALARY          NUMBER(6)    

CREATE TABLE JOBS(
    JOB_ID VARCHAR2(10) NOT NULL PRIMARY KEY,
    JOB_TITLE VARCHAR2(35) NOT NULL,
    MIN_SALARY NUMBER(6),
    MAX_SALARY NUMBER(6)
);
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES('AD_PRES', 'President', 20000, 40000);
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES('AD_VP', 'Administration Vice President', 15000, 30000);
INSERT INTO JOBS(JOB_ID, JOB_TITLE, MIN_SALARY, MAX_SALARY) VALUES('AD_ASST', 'Administration Assistant', 3000, 6000);
COMMIT;
select * from jobs;

--제약조건
JOB_ID:  PRIMARY KEY
JOB_TITLE: NOT NULL

--■■■JOB_HISTORY
--이름            널?       유형           
--------------- -------- ------------ 
--EMPLOYEE_ID   NOT NULL NUMBER(6)    
--START_DATE    NOT NULL DATE         
--END_DATE      NOT NULL DATE         
--JOB_ID        NOT NULL VARCHAR2(10) 
--DEPARTMENT_ID          NUMBER(4)    

CREATE TABLE JOB_HISTORY(
    EMPLOYEE_ID NUMBER(6) NOT NULL,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    JOB_ID VARCHAR2(10) NOT NULL,
    DEPARTMENT_ID NUMBER(4)
);

INSERT INTO JOB_HISTORY(EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID) VALUES(102, '93/01/13', '98/07/24', 'IT_PROG', 60);
INSERT INTO JOB_HISTORY(EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID) VALUES(101, '89/09/21', '93/10/27', 'AC_ACCOUNT', 110);
INSERT INTO JOB_HISTORY(EMPLOYEE_ID, START_DATE, END_DATE, JOB_ID, DEPARTMENT_ID) VALUES(101, '93/10/28', '97/03/15', 'AC_MGR', 110);
COMMIT;
SELECT * FROM JOB_HISTORY;

--제약관계 설정하기
--1. 개인키 설정
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_EMP_ID_ST_DATE_PK PRIMARY KEY(EMPLOYEE_ID, START_DATE);
--2. 체크 제약조건 설정 (끝 날짜는 시작 날짜보다 앞설 수 없다)
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_DATE_INTERVAL CHECK(end_date>start_date);
--3. 외래키 설정 (DEPARTMENT_ID는 DEPARTMENTS의 DEPARTMENT_ID를 참조한다
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_DEPT_FK FOREIGN KEY(DEPARTMENT_ID) REFERENCES DEPARTMENTS(DEPARTMENT_ID);
--4. 외래키 설정 (JOB_ID는 JOBS의 JOB_ID를 참조한다)
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_JOB_FK FOREIGN KEY(JOB_ID) REFERENCES JOBS(JOB_ID);
--5. 외래키 설정 (EMPLOYEE_ID는 EMPLOYEES의 EMPLOYEE_ID를 참조한다)
ALTER TABLE JOB_HISTORY ADD CONSTRAINT JHIST_EMP_FK FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID);

--제약조건
JOB_ID: 외래키 JOBS(JOB_ID)
EMPLOYEE_ID:외래키 NOT NULL
DEPARTMENT_ID: 외래키 
EMPLOYEE_ID: 개인키 항목
START_DATE: 개인키 항목 NOT NULL
END_DATE: NOT NULL

END_DATE> START_DATE

--■■■LOCATIONS

CREATE TABLE LOCATIONS (
	LOCATION_ID NUMBER(4)
	,STREET_ADDRESS VARCHAR2(40)
	,POSTAL_CODE VARCHAR2(12)
	,CITY VARCHAR2(30) CONSTRAINT LOC_CITY_NN NOT NULL
	,STATE_PRIVINCE VARCHAR2(25)
	,COUNTRY_ID CHAR(2)
	);
	
	
INSERT INTO LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,COUNTRY_ID)
VALUES(1001,'1297 Via Cola di Rie','00989','Roma','IT');
INSERT INTO LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PRIVINCE,COUNTRY_ID)
VALUES(2200,'12-98 Victoria Street', '2901', 'Sydney', 'New South Wales' ,'AU');
INSERT INTO LOCATIONS (LOCATION_ID,STREET_ADDRESS,POSTAL_CODE,CITY,STATE_PRIVINCE,COUNTRY_ID)
VALUES(1700,'2004 Charade Rd','98199','Seattle','Washington','US');
COMMIT;

	
ALTER TABLE LOCATIONS ADD
	CONSTRAINT LOC_ID_PK PRIMARY KEY(LOCATION_ID); --로케이션아이디 기본키로 추가
 ALTER TABLE LOCATIONS ADD
        	CONSTRAINT  LOK_C_ID_FK FOREIGN KEY(COUNTRY_ID)
            	REFERENCES COUNTRIES(COUNTRY_ID) ;	

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='LOCATIONS';

ALTER TABLE LOCATIONS DROP CONSTRAINT LOK_C_ID_FK;

TRUNCATE TABLE LOCATIONS;
SELECT * FROM LOCATIONS;



--■■■REGIONS

-------------선화
-- REGIONS 테이블 생성 
CREATE TABLE REGIONS (
       REGION_ID NUMBER PRIMARY KEY
       ,REGION_NAME VARCHAR2(25) 
);

-- REGIONS 테이블 데이터 삽입 
INSERT INTO REGIONS(REGION_ID,REGION_NAME)
VALUES (1, 'Europe');

INSERT INTO REGIONS(REGION_ID,REGION_NAME)
VALUES (2, 'Americas');

INSERT INTO REGIONS(REGION_ID,REGION_NAME)
VALUES (3, 'Asia');

INSERT INTO REGIONS(REGION_ID,REGION_NAME)
VALUES (4, 'Middle East and Africa');

-- REGIONS 테이블 확인
DESC REGIONS;
SELECT * FROM REGIONS;

--------■■■■■■■■■■■■EMPLOYEES
--이름             널?       유형           
---------------- -------- ------------ 
--EMPLOYEE_ID    NOT NULL NUMBER(6)    
--FIRST_NAME              VARCHAR2(20) 
--LAST_NAME      NOT NULL VARCHAR2(25) 
--EMAIL          NOT NULL VARCHAR2(25) 
--PHONE_NUMBER            VARCHAR2(20) 
--HIRE_DATE      NOT NULL DATE         
--JOB_ID         NOT NULL VARCHAR2(10) 
--SALARY                  NUMBER(8,2)  
--COMMISSION_PCT          NUMBER(2,2)  
--MANAGER_ID              NUMBER(6)    
--DEPARTMENT_ID           NUMBER(4)    

SELECT * FROM TAB;

DROP TABLE COUNTRIES CASCADE CONSTRAINTS PURGE;
DROP TABLE DEPARTMENTS CASCADE CONSTRAINTS PURGE;
DROP TABLE EMPLOYEES CASCADE CONSTRAINTS PURGE;
DROP TABLE JOBS CASCADE CONSTRAINTS PURGE;
DROP TABLE JOB_HISTORY CASCADE CONSTRAINTS PURGE;
DROP TABLE LOCATIONS CASCADE CONSTRAINTS PURGE;
DROP TABLE REGIONS CASCADE CONSTRAINTS PURGE;

